# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Product {
  id: String!
  name: String!
  originPrice: Float!
  discountRate: Float
  discountPrice: Float
  isSoldout: Boolean!

  """delivery method is one method."""
  delivery: String!
  endType: PRODUCT_END_TYPE!
  validFrom: DateTime!
  validUntil: DateTime!
  images: [String!]
  detailImages: [String!]
  content: String
  option1: String
  option2: String
  option3: String
  option4: String
  option5: String
  youtubeLink: String
  shopName: String!
  ceo: String!

  """brn is business_registraion_number"""
  brn: String!

  """mobn is mail_order_business_number"""
  mobn: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

enum PRODUCT_END_TYPE {
  TIME_ONLY
  TOTAL_QTY
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Image {
  id: String!
  imageUrl: String!
  createdAt: DateTime!
  deletedAt: DateTime
}

type User {
  id: String!
  email: String
  userType: USER_TYPE_ENUM
  nickname: String
  phoneNumber: String
  zipcode: String
  address: String
  addressDetail: String

  """Need Img URL to be saved"""
  profileImg: String

  """Need Img URL to be saved"""
  creatorAuthImg: String
  isAuthedCreator: Boolean
  snsName: String
  snsChannel: SNS_TYPE_ENUM
  followerNumber: Int
  mainContents: String
  introduce: String
  bank: String
  account: String
  accountName: String
  point: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

enum USER_TYPE_ENUM {
  COMMON_USER
  CREATOR
}

enum SNS_TYPE_ENUM {
  YOUTUBE
  INSTAGRAM
}

type SmsPostReturn {
  smsAuthTime: Int!
  message: String!
}

type Query {
  """fetching single product by productId"""
  fetchProduct(productId: String!): Product!

  """fetching mutiple product"""
  fetchProducts: [Product!]!

  """fetching single creator by userId"""
  fetchCreator(userId: String!): User!

  """fetching multiple creators"""
  fetchCreators(usersId: [String!]!): [User!]!

  """fetching user details logined"""
  fetchUser: User!

  """validate password if it is the same password currently using """
  validatePassword(prevPassword: String!): Boolean!
}

type Mutation {
  """product signup"""
  createProduct(createProductInput: CreateProductInput!): Product!

  """update product detail"""
  updateProduct(productId: String!, updateProductInput: UpdateProductInput!): Product!
  likeProduct(productId: Float!): Boolean!
  uploadImage(image: Upload!): Image!
  uploadImages(images: [Upload!]!): [Image!]!
  login(email: String!, password: String!): String!
  restoreAccessToken: String!
  logout: String!
  postSmsToken(phoneNumber: String!): SmsPostReturn!
  patchSmsToken(phoneNumber: String!, smsToken: String!, signupId: String!): Boolean!

  """user signup"""
  createUser(signupId: String!, createCommonUserInput: CreateCommonUserInput!): User!

  """creator signup"""
  createCreator(signupId: String!, createCreatorInput: CreateCreatorInput!): User!

  """return true if user nickname is already exist"""
  checkNickname(nickname: String!): Boolean!

  """update user detail"""
  updateUser(userId: String!, updateUserInput: UpdateUserInput!): User!

  """update user password"""
  updatePassword(userId: String!, password: String!): User!

  """delete user"""
  deleteUser(userId: String!): Boolean!
}

input CreateProductInput {
  name: String!
  originPrice: Float!
  discountPrice: Float
  delivery: String = "택배(무료배송)"
  option1: String
  option2: String
  option3: String
  option4: String
  option5: String
  endType: PRODUCT_END_TYPE!
  youtubeLink: String
  validFrom: DateTime!
  validUntil: DateTime!
  images: [String!]
  detailImages: [String!]
  content: String
  shopName: String!
  ceo: String!

  """brn is business_registration_number"""
  brn: String!

  """mobn is mail_order_business_number"""
  mobn: String!
}

input UpdateProductInput {
  name: String
  originPrice: Float
  discountPrice: Float
  delivery: String = "택배(무료배송)"
  option1: String
  option2: String
  option3: String
  option4: String
  option5: String
  endType: PRODUCT_END_TYPE
  youtubeLink: String
  validFrom: DateTime
  validUntil: DateTime
  images: [String!]
  detailImages: [String!]
  content: String
  shopName: String
  ceo: String

  """brn is business_registration_number"""
  brn: String

  """mobn is mail_order_business_number"""
  mobn: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateCommonUserInput {
  email: String!
  password: String!
  nickname: String!
  phoneNumber: String!
  zipcode: String!
  address: String!
  addressDetail: String!
  profileImg: String
  point: Int = 0
}

input CreateCreatorInput {
  email: String!
  password: String!
  nickname: String!
  phoneNumber: String!
  zipcode: String!
  address: String!
  addressDetail: String!
  profileImg: String
  creatorAuthImg: String
  isAuthedCreator: Boolean = false
  snsName: String
  snsChannel: SNS_TYPE_ENUM!
  followerNumber: Int = 0
  mainContents: String
  introduce: String
  bank: String
  account: String
  accountName: String
  point: Int = 0
}

input UpdateUserInput {
  email: String
  password: String
  userType: USER_TYPE_ENUM = COMMON_USER
  nickname: String
  phoneNumber: String
  zipcode: String
  address: String
  addressDetail: String
  profileImg: String
  creatorAuthImg: String
  isAuthedCreator: Boolean = false
  snsName: String
  snsChannel: SNS_TYPE_ENUM
  followerNumber: Int = 0
  mainContents: String
  introduce: String
  bank: String
  account: String
  accountName: String
  point: Int = 0
}