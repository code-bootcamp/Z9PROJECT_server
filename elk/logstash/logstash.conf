input{
  jdbc {
        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://zero9-db:3306/zero9"
        jdbc_user => 'root'
        jdbc_password => 'root'
        schedule => '* * * * *'
        use_column_value => 'true'
        tracking_column => 'updatedat'
        tracking_column_type => 'numeric'
        last_run_metadata_path => "./usertime.txt"
        statement => "select *,
            unix_timestamp(updatedat) as updatedat
            from user
            where unix_timestamp(updatedat) > :sql_last_value
            order by updatedat asc"
        type => "creator"
    }
}
input{
    jdbc {
        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://zero9-db:3306/zero9"
        jdbc_user => 'root'
        jdbc_password => 'root'
        schedule => '* * * * *'
        use_column_value => 'true'
        tracking_column => 'updatedat'
        tracking_column_type => 'numeric'
        last_run_metadata_path => "./prodtime.txt"
        statement => "select product.id, name, originprice, quantity, originalquantity
      discountRate, discountPrice, issoldout, delivery,
      endtype, validfrom, validuntil, images,
      product.option1, product.option2, product.option3, product.option4, product.option5,
      youtubelink, shopname, ceo, brn, mobn, userId,
      skin, textColor, bgColor,
      product.createdat, product.deletedat,
      `user`.id as user_id, `user`.email as user_email, `user`.userType as user_Type,
      user.nickname as user_nickname, user.phoneNumber as user_phoneNumber, user.zipcode as user_zipcode, user.address
			as user_address, user.addressDetail as user_addressDeatil, user.profileImg as user_profileImg, user.creatorAuthImg as user_creatorAuthImg,
			user.isAuthedCreator as user_isAuthedCreator, user.snsId as user_snsId, 
      user.snsName as user_snsName, user.snsChannel as user_snsChannel, user.followerNumber as user_follwerNumber,
			user.mainContents as user_MainContents, user.introduce as user_introduce, user.bank as user_bank, user.account as user_account,
			user.accountName as user_accountName, user.point as user_point, user.createdAt as user_CreatedAt,
			user.deletedAt as user_deletedAt,
			unix_timestamp(user.updatedat) as user_updatedat,
			unix_timestamp(product.updatedat) as product_updatedat,
			unix_timestamp(GREATEST(user.updatedat, product.updatedat)) as updatedAt
      from product
      left join user on user.id=userId
      where unix_timestamp(GREATEST(user.updatedat, product.updatedat)) > :sql_last_value 
      order by updatedat asc;"
        type => "product"
    }
}

filter {
  mutate {
    # id 값을 설정하여, 동일한 값이 다른 데이터로 들어가지 않게 방지 (수정 할 때도)
    copy => { "id" => "[@metadata][_id]"}
  }
}

output {  
    stdout {codec => rubydebug}
    if [type] == "creator" {
        elasticsearch {  
            hosts => "elasticsearch:9200"  
            index => "zero9%{type}"
            document_id => "%{[@metadata][_id]}"
            template => '/usr/share/logstash/creator_template.json'
            template_name => "creator_template"
            # manage_template => false
            template_overwrite => true
        }
    }
    if [type] == "product" {
        elasticsearch {  
            hosts => "elasticsearch:9200"  
            index => "zero9%{type}"
            document_id => "%{[@metadata][_id]}"
            template => '/usr/share/logstash/product_template.json'
            template_name => "product_template"
            # manage_template => false
            template_overwrite => true  
        }
    }
} 
